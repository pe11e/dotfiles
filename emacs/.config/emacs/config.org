#+TITLE: Pelle's GNU Emacs Config
#+AUTHOR: Pelle Schöld
#+DESCRIPTION: My Personal Emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#important-programs-to-load-first][Important programs to load first]]
  - [[#elpaca-package-manager][Elpaca package manager]]
  - [[#evil-mode][Evil mode]]
  - [[#install-dracula-theme][Install dracula theme]]
  - [[#general-keybindings][General keybindings]]
  - [[#which-key][Which-key]]
  - [[#org-table-of-contents][Org Table of contents]]
  - [[#org-bullets][Org Bullets]]
  - [[#all-the-icons][All The Icons]]
  - [[#projectile][Projectile]]
  - [[#diminish][Diminish]]
  - [[#company][Company]]
- [[#org-mode-source-code-tag-expantion][Org Mode Source Code Tag Expantion]]
  - [[#org-mode-parentheses-missmatch-fix][Org mode parentheses missmatch fix]]
- [[#sane-default-values][Sane default values]]
  - [[#disable-auto-save-and-auto-backup][Disable auto save and auto-backup]]
  - [[#scroll-behaviour][Scroll behaviour]]
  - [[#indentation][Indentation]]
- [[#graphical-user-interface][Graphical user interface]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display line numbers and truncated lines]]
  - [[#fonts][Fonts]]
- [[#languages][Languages]]
  - [[#lsp][Lsp]]
  - [[#typescript][Typescript]]
  - [[#scheme][Scheme]]
- [[#tree-sitter][Tree-sitter]]
  - [[#install-language-sources][Install language sources]]
  - [[#remap-languages-major-modes][Remap languages major modes]]

* Important programs to load first

** Elpaca package manager

*** Install elpaca

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.11)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

*** Setup use-package

#+begin_src emacs-lisp
  ;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :demand t)
;;(elpaca-wait)

;;Turns off elpaca-use-package-mode current declartion
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
(use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
;;(elpaca nil (message "deferred"))
#+end_src

** Evil mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))

  (use-package evil-collection
    :after evil
    :diminish
    :config
    (setq evil-collection-mode-list '(dired ibuffer))
    (evil-collection-init))

  (use-package evil-tutor)
#+end_src

** Install dracula theme
#+begin_src emacs-lisp
    (use-package dracula-theme
	:config
	(load-theme 'dracula t))
#+end_src

** General keybindings

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)
    ;; use 'SPC' as the global leader key
    (general-create-definer leader-keys
     :states '(normal insert visual emacs)
     :keymaps 'override
     :prefix "SPC" ;; set the leader key
     :global-prefix "M-SPC")

     (leader-keys
      "b" '(:ignore t :wk "buffer")
      "bb" '(switch-to-buffer :wk "switch buffer")
      "bi" '(ibuffer :wk "list buffers")
      "bd" '(kill-this-buffer :wk "kill this buffer")
      "bn" '(next-buffer :wk "next buffer")
      "bp" '(previous-buffer :wk "previous buffer")
      "br" '(revert-buffer :wk "revert buffer"))

     (leader-keys
      "e" '(:ignore t :wk "evaluate")
      "eb" '(eval-buffer :wk "evaluate elisp in buffer")
      "ed" '(eval-defun :wk "evaluate defun containing or after point")
      "ee" '(eval-expression :wk "evaluate an elisp expression")
      "el" '(eval-last-sexp :wk "evaluate elisp expression before point")
      "er" '(eval-region :wk "evaluate elisp in region"))

     (leader-keys
      "w" '(:ignore t :wk "window")
      "wE" '(evil-window-vsplit :wk "split window vertically")
      "wR" '(evil-window-split :wk "split window horizontally")
      "wn" '(evil-window-new :wk "new window")
      "wd" '(evil-window-delete :wk "delete window")
      "wh" '(evil-window-left :wk "window left")
      "wj" '(evil-window-down :wk "window down")
      "wk" '(evil-window-up :wk "window up")
      "wl" '(evil-window-right :wk "window right")
      "ww" '(evil-window-next :wk "goto next window")
      "wH" '(buf-move-left :wk "buffer move left")
      "wJ" '(buf-move-down :wk "buffer move down")
      "wK" '(buf-move-up :wk "buffer move up")
      "wL" '(buf-move-right :wk "buffer move right"))

     (leader-keys
      "p" '(projectile-command-map :wk "projectile"))

    (leader-keys
      "o" '(:ignore t :wk "org")
      "oe" '(org-babel-execute-src-block :wk "evaluate src block in buffer"))

     (leader-keys
      "f" '(:ignore t :wk "find")
      "ff" '(find-file :wk "find file")
      "f;" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "edit emacs config"))

     (leader-keys
      "h" '(:ignore t :wk "help")
      "hrr" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "reload emacs config"))

     (leader-keys
      "t" '(:ignore t :wk "toggle")
      "tt" '(visual-line-mode :wk "toggle truncated lines"))
   )
#+end_src

** Which-key
#+begin_src emacs-lisp
  (use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → "))
#+end_src

** Org Table of contents
#+begin_src emacs-lisp
  (use-package toc-org
   :commands toc-org-enable
   :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
   :ensure t
   :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** All The Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
   :ensure t
   :if (display-graphic-p))

  (use-package all-the-icons-dired
   :init (setq all-the-icons-dired-monochrome nil)
   :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
   :ensure t
   :diminish
   :init (projectile-mode +1))
#+end_src

** Diminish
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

** Company
Company is used for text completion.
#+begin_src emacs-lisp
    (use-package company
     :defer 2
     :diminish
     :custom
     (company-begin-commands '(self-insert-command))
     (company-idle-delay .1)
     (company-minimum-prefix-length 2)
     (company-show-numbers t)
     (company-tooltip-align-annotations 't)
     (global-company-mode t))

    (use-package company-box
    :after company
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src

* Org Mode Source Code Tag Expantion
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** Org mode parentheses missmatch fix
#+begin_src emacs-lisp
  (defun org-syntax-table-modify ()
    "Modify `org-mode-syntax-table' for the current org buffer."
    (modify-syntax-entry ?< "." org-mode-syntax-table)
    (modify-syntax-entry ?> "." org-mode-syntax-table)
    (modify-syntax-entry ?/ "." org-mode-syntax-table))

  (add-hook 'org-mode-hook #'org-syntax-table-modify)
#+end_src

#+RESULTS:
| #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | #[nil ((org-bullets-mode 1)) (t)] | toc-org-enable | #[nil ((electric-indent-local-mode -1)) nil] | org-syntax-table-modify | org-tempo-setup | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |


* Sane default values
** Disable auto save and auto-backup
#+begin_src emacs-lisp
    (setq auto-save-default nil)
    (setq make-backup-files nil)
#+end_src

** Scroll behaviour
#+begin_src emacs-lisp
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
    (setq mouse-wheel-progressive-speed nil)
#+end_src

** Indentation
#+begin_src emacs-lisp
    (setq indent-tabs-mode nil)
    (setq tab-width 2)
    (add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))
#+end_src

* Graphical user interface

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
#+end_src

** Display line numbers and truncated lines
#+begin_src emacs-lisp
    (global-display-line-numbers-mode 1)
    (global-visual-line-mode 1)
    (setq truncate-lines t)
    (setq display-line-numbers-type 'relative)
#+end_src

** Fonts
#+begin_src emacs-lisp
    (set-face-attribute 'default nil
        :font "Fira Mono for Powerline"
        :height 140
        :weight 'medium)

    ;; Set the default font on all graphical frames.
    (add-to-list 'default-frame-alist '(font . "Fira Mono for Powerline-14"))
#+end_src

* Languages

** Lsp
#+begin_src emacs-lisp
  (use-package lsp-mode
   :commands (lsp lsp-deferred)
   :init
    (setq lsp-keymap-prefix "C-c l")
   :config
    (lsp-enable-which-key-integration t))
#+end_src

** Typescript
#+begin_src emacs-lisp
    (use-package typescript-mode
     :hook (typescript-mode . lsp-deferred)
     :config 
      (setq typescript-indent-level 2))
#+end_src

** Scheme
#+begin_src emacs-lisp
  (use-package racket-mode :ensure t)

  (use-package ob
    :ensure nil
    :after (org racket-mode)
    :config
    (setq org-export-use-babel nil
  	org-confirm-babel-evaluate nil)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (racket . t))))

  (use-package ob-racket                               
   :ensure (:host github :repo "hasu/emacs-ob-racket")
   :after (org ob racket-mode))                                         

#+end_src

* Tree-sitter

** Install language sources
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
  '((css "https://github.com/tree-sitter/tree-sitter-css")
   (elisp "https://github.com/Wilfred/tree-sitter-elisp")
   (html "https://github.com/tree-sitter/tree-sitter-html")
   (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
   (json "https://github.com/tree-sitter/tree-sitter-json")
   (markdown "https://github.com/ikatyang/tree-sitter-markdown")
   (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
   (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
   (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

  ;; Uncomment this line when installing new language grammar
  ;;(mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))
#+end_src

** Remap languages major modes
#+begin_src emacs-lisp
(setq major-mode-remap-alist
'((yaml-mode . yaml-ts-mode)
   (bash-mode . bash-ts-mode)
   (js-mode . js-ts-mode)
   (javascript-mode . js-ts-mode)
   (js2-mode . js-ts-mode)
   (js-base-mode . js-ts-mode)
   (typescript-mode . typescript-ts-mode)
   (json-mode . json-ts-mode)
   (css-mode . css-ts-mode)
   ))
#+end_src

